sparkle {
  // start the protocol server at launch
  auto-start = true

  // custom HTTP APIs 
  apis = []
  
  // set to ["*"] to open /v1/data api to _all_ requests (useful for internal development) 
  cors-hosts = []
  
  // list of class names to make available as custom selectors to protocol requests
  // the classes should be subclasses of CustomSourceSelector and take constructor parameters
  // of type com.typesafe.config.Config and type nest.sparkle.store.Store 
  custom-selectors = []

  // list of class names to make available as custom transforms to protocol requests
  // the classes should be subclasses of CustomTransform and take a constructor parameter
  // of type com.typesafe.config.Config 
  custom-transforms = []
  
  transforms {
    // maximum number of parts to create when summarizing, to forestall
    // clients making accidentally large queries.  
    max-parts = 3000
  }

  // web UI for internal administration
  admin {
    // tcp port for http connections
    port = 1235
    
    // network interface for admin http server 
    interface = 0.0.0.0

    // tcp port for file upload
    upload-port = 1237
  }
  
  // tcp port for http connections
  port = 1234

  web-socket {
    port = 1236
  }
  
  // Location of custom web dashboard content. The web server will look in the provided directory or
  // resource path for (e.g. .html/.js) content to serve. The server will also  look in
  // the provided directory for a file named index.html to serve in response to http requests
  // without a path. Application .conf files should put a single path in either directory or resource.
  web-root {  
    // dashboard from filesystem directory. 
    directory = []
    
    // dashboard from classpath resource 
    resource = []
  }
  
  // authentication & authorization 
  auth = {    
    // provider must be subclass of AuthProvider. It provides for authentication
    // and authorization of client requests. AuthProvider subclasses must
    // have a constructor with a single Config parameter.
    //
    // The default AuthProvider allows all access to everyone. 
    provider = "nest.sparkle.time.protocol.AllAuthorized"
  } 
  
  // alternate config for basic authentication: a single static password
//  auth = {    
//    // authenticate with a static password. Having the password provides full access.
//    provider = "nest.sparkle.time.protocol.StaticAuthentication"
//    
//    // configure the static password for the StaticAuthentication AuthProvider here
//    password = "globalSecret"
//  } 
  
  resource-web-root = []
      
  // turn on client address reporting (turn off if behind nginx)
  spray.can.server.remote-address-header = true
  
  akka {
    loglevel = DEBUG
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    log-dead-letters = 0
    log-dead-letters-during-shutdown = off   // to quiet IO-HTTP/listener
  }
}

exporter {  // TODO move inside of sparkle {}
  timeout = 5m  // time to wait for an export to complete
}


